Interfaces

O Java também suporta interfaces — coleções de métodos relacionados que normalmente permitem informar aos objetos o que fazer, mas não como fazer. Na analogia do carro, uma 
interface das capacidades “básicas de dirigir” consistindo em um volante, um pedal de acelerador e um pedal de freio permitiria que um motorista informasse ao carro o que
fazer. Depois que você sabe como usar essa interface para virar, acelerar e frear, você pode dirigir muitos tipos de carro, embora os fabricantes possam implementar esses
sistemas de forma diferente.

Uma classe implementa zero ou mais interfaces — cada uma das quais pode ter um ou mais métodos —, assim como um carro implementa interfaces separadas para as funções básicas 
de dirigir, controlar o rádio, controlar os sistemas de aquecimento, ar-condicionado e afins. Da mesma forma que os fabricantes de automóveis implementam os recursos de forma
distinta, classes podem implementar métodos de uma interface de maneira diferente. Por exemplo, um sistema de software pode incluir uma interface de “backup” que ofereça os 
métodos save e restore. As classes podem implementar esses métodos de modo diferente, dependendo dos tipos de formato em que é feito o backup, como programas, textos, áudios,
vídeos etc., além dos tipos de dispositivo em que esses itens serão armazenados.

Interfaces Java são particularmente úteis para atribuir funcionalidade comum a classes possivelmente não relacionadas. Isso permite que objetos de classes não relacionadas 
sejam processados polimorficamente — objetos de classes que implementam a mesma interface podem responder às mesmas chamadas de método de interface. Para demonstrar a criação
e uso de interfaces, modificaremos nosso aplicativo de folha de pagamento para criar um aplicativo geral de contas a pagar que pode calcular pagamentos em razão dos 
funcionários da empresa e as quantias das faturas a serem cobradas por mercadorias adquiridas.

Uma classe pode sim, implementar mais deu uma interface o que não pode é herdar (herança) mais de uma classe.

Exemplo básico:

public class Pessoa  implements Pessoa_Anda, Pessoa_Corre {
    String nome;

    @Override
    public void correr() {
        // TODO Auto-generated method stub

    }

    @Override
    public void andar() {
        // TODO Auto-generated method stub

    }
}

// interface Pessoa_Corre

public interface Pessoa_Corre {
    void correr();
}

public interface Pessoa_Anda {
    void andar();
}

Classe abstratas

Quando pensamos em um tipo de classe, supomos que os programas criam objetos desse tipo. Às vezes é útil declarar as classes — chamadas classes abstratas — para as quais você
nunca pretende criar objetos. Como elas só são utilizadas como superclasses em hierarquias de herança, são chamadas superclasses abstratas. Essas classes não podem ser 
utilizadas para instanciar objetos, porque, como veremos mais adiante, classes abstratas são incompletas. As subclasses devem declarar as “partes ausentes” para que se tornem
classes “concretas”, a partir das quais você pode instanciar objetos. Do contrário, essas subclasses também serão abstratas.

Utilizamos a palavra-chave abstract para impedir que a classe possa ser instanciada. Esse é o efeito direto de se usar o modificador abstract na declaração de uma classe. Caso
a gente tente instanciar essa classe, haverá um erro de compilação. O problema é instanciar a classe – criar referência você pode. Se ela não pode ser instanciada, para que 
serve? Serve para o polimorfismo e herança dos atributos e métodos, que são recursos muito poderosos. 

Mas qual é a real vantagem de uma classe abstrata? Poderíamos ter feito isso com uma herança comum. Por enquanto, a única diferença é que não podemos instanciar um objeto do 
tipo abstrato, que já é de grande valia, dando mais consistência ao sistema. O propósito de uma classe abstrata é fornecer uma superclasse apropriada a partir da qual outras 
classes podem herdar e assim compartilhar um design comum. As classes que podem ser utilizadas para instanciar objetos são chamadas classes concretas. Essas classes fornecem 
implementações de cada método que elas declaram (algumas implementações podem ser herdadas). Superclasses abstratas são excessivamente gerais para criar objetos reais — elas 
só especificam o que é comum entre subclasses.

Nem todas as hierarquias contêm classes abstratas. Entretanto, programadores costumam escrever o código de cliente que utiliza apenas tipos abstratos de superclasse para 
reduzir dependências do código de cliente em um intervalo de tipos de subclasse. Por exemplo, você pode escrever um método com o parâmetro de um tipo de superclasse abstrata.
Quando chamado, esse método pode receber um objeto de qualquer classe concreta que direta ou indiretamente estende a superclasse especificada como o tipo do parâmetro.

Você cria uma classe abstrata declarando-a com a palavra-chave abstract. Uma classe abstrata normalmente contém um ou mais métodos abstratos. Um método abstrato é um método 
de instância com a palavra-chave abstract na sua declaração, como em:

public abstract void draw(); // método abstrato

Métodos abstratos não fornecem implementações. Uma classe que contém quaisquer métodos abstratos deve ser expressamente declarada abstract, mesmo que ela contenha alguns 
métodos concretos (não abstratos). Cada subclasse concreta de uma superclasse abstrata também deve fornecer implementações concretas de cada um dos métodos abstratos da 
superclasse. Os construtores e métodos static não podem ser declarados abstract. Os construtores não são herdados, portanto um construtor abstract nunca seria implementado. 
Embora métodos não private static sejam herdados, eles não podem ser sobrescritos. Como os métodos abstract devem ser sobrescritos para que possam processar objetos com base 
em seus tipos, não faria sentido declarar um método static como abstract.

Interfaces X Classes abstratas

Interfaces:

· Uma interface não é considerada uma Classe e sim uma Entidade.
· Não possui implementação, apenas assinatura, ou seja, apenas a definição dos seus métodos sem o corpo.
· Todos os métodos são abstratos.
· Seus métodos são implicitamente Públicos e Abstratos (public abstract).
· Não há como fazer uma instância de uma Interface e nem como criar um Construtor.
· Funcionam como um tipo de "contrato", onde são especificados os atributos, métodos e funções que as classes que implementem essa interface são obrigadas a implementar.
· Já que C# não suporta Heranças Múltiplas, as Interfaces são usadas para implementá-las.

Classes Abstratas:

· As classes abstratas devem conter pelo menos um método abstrato, que não tem corpo.
· É um tipo especial de classe que não há como criar instâncias dela.
· É usada apenas para ser herdada, funciona como uma super classe.
· Uma grande vantagem é que força a hierarquia para todas as sub-classes.
· É um tipo de contrato que faz com que as sub-classes contemplem as mesmas hierarquias e/ou padrões.

Overview

Característica                  Interface                           Classe Abstrata

Herança múltipla                Uma classe pode                     Uma classe pode herdar  
                                implementar diversas                somente uma classe. 
                                interfaces.
                                
Implementação Padrão            Uma interface não pode              Uma classe abstrata pode
                                conter qualquer tipo de             fornecer código completo,
                                código, muito menos código          código padrão ou ter
                                padrão.                             apenas a declaração de seu
                                                                    esqueleto para ser
                                                                    posteriormente sobrescrita.
                                                                
Constantes                      Suporte somente                     Pode conter constantes
                                constantes do tipo estática.        estáticas e de instância.
                                
Componentes de terceiros        Uma implementação de                Uma classe de terceiros
                                uma interface pode ser              precisa ser reescrita para
                                incluída a qualquer classe          estender somente a partir
                                de terceiros.                       da classe abstrata.
                                
Homogeneidade                   Se todas as diversas                Se as várias
                                implementações                      implementações são todas
                                compartilham a assinatura           do tipo e compartilham um
                                do método então a                   comportamento e status
                                interface funciona melhor.          comum , então a classe
                                                                    abstrata funciona melhor.
                                                                    
Manutenção                      Se o código do seu cliente          Idêntico.
                                conversa somente em
                                termos de uma interface,
                                você pode facilmente
                                alterar a implementação
                                concreta usando um
                                método factory.
                                
Velocidade                      Lento, requer trabalho              Rápido.
                                extra para encontrar o
                                método correspondente na
                                classe atual.
                                
Clareza                         Todas as declarações de             Você pode por código
                                constantes em uma                   compartilhado em uma
                                interface são                       classe abstrata. Você pode
                                presumidamente publicas             usar código para computar
                                ou estáticas.                       o valor inicial de suas
                                                                    constantes e variáveis de
                                                                    instância ou estáticas.
                                                                    
Funcionalidades Adicionais      Se você incluir um novo             Se você incluir um novo
                                método em uma interface             método em uma classe
                                você precisa ajustar todas          abstrata você tem a opção
                                as implementações da                de fornecer uma
                                interface.                          implementação padrão
                                                                    para ele.

Leitura complementar:

https://www.alura.com.br/apostila-java-orientacao-objetos/classes-abstratas?gclid=CjwKCAjw_b6WBhAQEiwAp4HyILwVXy8gvYVeASf15IYIFrUSUYgHqKUMQxleSSwIy6FhQt9Ok6e4ZxoCQz0QAvD_BwE
https://www.alura.com.br/conteudo/java-heranca-interfaces-polimorfismo
https://www.devmedia.com.br/interfaces-x-classes-abstratas/13337
